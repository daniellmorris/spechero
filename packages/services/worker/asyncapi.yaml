asyncapi: 3.0.0
info:
  title: Multi-Queue Topic Exchange Example
  version: 1.0.0
servers:
  myAMQPServer:
    host: localhost
    protocol: amqp
    description: My AMQP Broker
channels:
  myTopicExchangeEntry:
    address: myTopicExchangeEntry
    messages:
      publish.message:
        $ref: '#/components/messages/genericMessage'
    description: A topic exchange for routing messages
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: myTopicExchangeEntry
          type: topic
          durable: true
          autoDelete: false
          vhost: /
        bindingVersion: "0.3.0"
  myTopicExchange:
    address: myTopicExchange
    messages:
      publish.message:
        $ref: '#/components/messages/genericMessage'
    description: A topic exchange for routing messages
    bindings:
      amqp:
        is: routingKey
        exchange:
          name: myTopicExchange
          type: topic
          durable: true
          autoDelete: false
          vhost: /
          x-hero-amqp-exchange-binding:
            source: myTopicExchangeEntry
            routingKeys:
            - #
            args: {}
        bindingVersion: "0.3.0"
  queueA:
    address: queueA
    messages:
      subscribe.message.0:
        $ref: '#/components/messages/genericMessage'
      subscribe.message.1:
        $ref: '#/components/messages/genericMessage2'
    description: Queue A bound to myTopicExchange with routingKeyA
    bindings:
      amqp:
        is: queue
        queue:
          name: queueA
          durable: true
          exclusive: false
          autoDelete: false
          vhost: /
          x-hero-amqp-queue-binding:
            source: myTopicExchange
            routingKeys:
            - routingKeyA
            args: {}
        bindingVersion: "0.3.0"
  queueB:
    address: queueB
    messages:
      subscribe.message:
        $ref: '#/components/messages/genericMessage'
    description: Queue B bound to myTopicExchange with routingKeyB
    bindings:
      amqp:
        is: queue
        queue:
          name: queueB
          durable: true
          exclusive: false
          autoDelete: false
          vhost: /
          x-hero-amqp-queue-binding:
            source: myTopicExchange
            routingKeys:
            - routingKeyB
            args: {}
        bindingVersion: "0.3.0"
  queueC:
    address: queueC
    messages:
      subscribe.message.0:
        $ref: '#/components/messages/genericMessage'
      subscribe.message.1:
        $ref: '#/components/messages/genericMessage2'
    description: Queue C bound to myTopicExchange with routingKeyC
    bindings:
      amqp:
        is: queue
        queue:
          name: queueC
          durable: true
          exclusive: false
          autoDelete: false
          vhost: /
          x-hero-amqp-queue-binding:
            source: myTopicExchange
            routingKeys:
            - routingKeyC
            args: {}
        bindingVersion: "0.3.0"
operations:
  myTopicExchange.publish:
    action: send
    channel:
      $ref: '#/channels/myTopicExchange'
    messages:
      - $ref: '#/channels/myTopicExchange/messages/publish.message'
  queueA.subscribe:
    action: receive
    x-hero-handler:
      id: queueA
      action: log
    channel:
      $ref: '#/channels/queueA'
    messages:
      - $ref: '#/channels/queueA/messages/subscribe.message.0'
      - $ref: '#/channels/queueA/messages/subscribe.message.1'
  queueB.subscribe:
    action: receive
    channel:
      $ref: '#/channels/queueB'
    messages:
      - $ref: '#/channels/queueB/messages/subscribe.message'
  queueC.subscribe:
    action: receive
    channel:
      $ref: '#/channels/queueC'
    messages:
      - $ref: '#/channels/queueC/messages/subscribe.message.0'
      - $ref: '#/channels/queueC/messages/subscribe.message.1'
components:
  messages:
    genericMessage:
      payload:
        type: object
        properties:
          property1:
            type: string
            enum:
              - test1
          property2:
            type: integer
    genericMessage2:
      payload:
        type: object
        properties:
          property1:
            type: string
          property2:
            type: integer
          property3:
            type: integer
